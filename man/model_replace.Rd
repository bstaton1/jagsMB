% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export-fns.R
\name{model_replace}
\alias{model_replace}
\title{Replace a Line of Code in Existing Model File}
\usage{
model_replace(
  model_file = NULL,
  pattern,
  replacement,
  new_model_file = model_file
)
}
\arguments{
\item{model_file}{Name of file containing JAGS model code that
should be edited; defaults to \code{NULL}, requiring the user to supply a value.}

\item{pattern}{Character string to find matches for in the model
definition found in \code{model_file}. Supplied to \code{\link[stringr:str_which]{stringr::str_which()}}
so may be regex.}

\item{replacement}{Character string containing JAGS code that should
replace the line of code matched by \code{pattern}.}

\item{new_model_file}{Name of file to write the new JAGS model code;
must have \code{".txt"} extension.}
}
\description{
Replace a Line of Code in Existing Model File
}
\details{
Only one line of code can be matched at a time -- an error message
containing the offending line numbers will be returned
in the case of multiple matches. When found, the \strong{entire singular line}
containing the match is replaced.
}
\note{
\code{\link[=model_write]{model_write()}} and \code{model_replace()} are the only functions that
accept a \code{model_file} argument but do not default to
\verb{jagsMB_opts("model_file)"}. Instead they default to \code{NULL}, which returns
an error requiring the user to supply a file path manually.

It is advisable to test this with the \code{new_model_file} argument set
to verify that the change is made properly before using the overwrite
functionality.
}
